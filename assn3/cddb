#!/usr/bin/env python3

#Suin Kim
#6/8/2019

#CS265-005
#Assignment 3
#CD Database

#Description: A command-line utility to maintain a flat-file database of album information. Allows the user to view album info, add a new entry, or delete an entry, where each entry is an album with all of the track information. Assumes that the filename (location of the DB) is stored in an exported environment variable, $CDDB.

#System: Python 3.6.7 on tux5.cs.drexel.edu

import sys
import os

#check arguments provided
def check_args():
	if (len(sys.argv) == 2): #checks if only one argument is provided

		if (sys.argv[1] == '-l'): 
			list_album()

		elif (sys.argv[1] == '-d'):
			delete_album()

		elif (sys.argv[1] == '-a'):
			add_album()

		else: #shows usage msg and quits if -h or bad argument is supplied
			help()

	else: #shows usage msg and quits if no argument or multiple arguments are supplied
		help()

#show usage msg and quit
def help():
	print('Usage: cddb [option] \n'
			'Options:\n'
			'-l: displays menu to view artists, albums, and songs\n'
			'-d: displays menu to delete an album\n'
			'-a: displays menu to add an album\n'
			'-h: displays usage information')
	sys.exit()

#reads and parses database to create data structure that represents artists, albums, songs
def read_cddb():
	#data structure is dictionary where keys are artists and values are dictionaries where keys are albums and values are lists of songs
	artists_dictionary = {} 
	songs_list = []
	item = 'artist'

	cddb = open(os.environ['CDDB'], 'r') #open and read database

	for line in cddb:	#parses each line of database and builds data structure
		if (item == 'artist'): #was advised to take first line as artist, second as year + album, and then whatever is left as songs
			artist = line[:-1] #do not include \n at end of each line
			item = 'album'

		elif (item == 'album'):
			album = line[:-1]
			item = 'song'

		elif (item == 'song'):

			if not (line in ['\r\n', '\n']): #adds songs until reaches end of songs
				song = line[1:-1] #do not include - at beginning and \n at the end of each line
				songs_list.append(song)
			
				if (artist in artists_dictionary): #check for duplicate artists
					artists_dictionary[artist][album] = songs_list

				else:
					artists_dictionary[artist] = {album:songs_list}

			else: #resets at end of songs
				songs_list = []
				item = 'artist'	

	cddb.close()

	return artists_dictionary

#updates database with changes made during delete_album() and add_album()
def update_cddb(artists_dictionary):
	new_cddb = [] #list for updated database

	for artist in artists_dictionary:#loop through artist keys

		for album in artists_dictionary[artist]: #loop through album keys
			new_cddb.append(artist + '\n' + album + '\n') #write artist and album as first two lines

			for song in artists_dictionary[artist][album]: #loop through songs in nested dictionary
				new_cddb.append('-' + song + '\n') #write songs after artist and album

			new_cddb.append('\n') #add empty line once artist, album, and songs are written
	
	temp_cddb = open((os.environ['CDDB'] + '.tmp'), 'w') #temporary file

	for line in new_cddb: #write updated databse into temporary file
		temp_cddb.write(line)

	temp_cddb.close()

	os.rename((os.environ['CDDB'] + '.tmp'), os.environ['CDDB']) #rename temporary file to replace current database
	
#parses database and creates data structure, then displays menu to view artists, albums, and songs
def list_album():
	artists_dictionary = read_cddb() #read database into data structure
	list_album_menu(artists_dictionary, '', '', 'artists') #call to start of menu

#displays enumerated, alphabetical lists of artists, albums, and songs
def list_album_menu(artists_dictionary, artist, album, level):
	if (level == 'artists'): #menu level

		while True: #keep prompting user for input until valid input is given
			print('Artists:')
			i = 0 #counter to enumerate
			artists = sorted(artists_dictionary) #returns alphabetically sorted list 

			for artist in artists: #displays enumerated and alphabetical list
				print(str(i) + ': ' + artist)
				i+=1
		
			user_input = input('Choose an artist by entering the number, or quit by entering q.\n')
		
			if (user_input == 'q'):
				sys.exit()

			elif user_input.isdigit():
				if (int(user_input) in range(len(artists))):
					list_album_menu(artists_dictionary, artists[int(user_input)], '', 'albums') #recursive call for albums level of menu

			else:
				print('Invalid input.')

	elif (level == 'albums'):

		while True:
			print('Albums by ' + str(artist) + ':')
			i = 0
			albums = sorted(artists_dictionary[artist])

			for album in albums:
				print(str(i) + ': ' + album)
				i+=1

			user_input = input('Choose an album by entering the number, or return to artists by entering a.\n')
		
			if (user_input == 'a'):
				list_album_menu(artists_dictionary, '', '', 'artists') #recursive call to return to artists level of menu

			elif user_input.isdigit():
				if (int(user_input) in range((len(albums)))):
					list_album_menu(artists_dictionary, artist, albums[int(user_input)], 'songs') #recursive call for songs level of menu

			else:
				print('Invalid input.')

	else:

		while True:
			print('Songs in ' + str(album) + ':')
			i = 0
			songs = sorted(artists_dictionary[artist][album])

			for song in songs:
				print(str(i) + ': ' + song)
				i+=1

			user_input = input('Return to albums by entering al.\n')
			
			if (user_input == 'al'):
				list_album_menu(artists_dictionary, artist, album, 'albums') #recursive call to return to albums level of menu

			else:
				print('Invalid input.')

#parses database and creates data structure for delete album menu
def delete_album():
	artists_dictionary = read_cddb() #read database into data structure
	delete_album_menu(artists_dictionary, '', '', 'artists') #call to start of menu

#displays menu to delete album
def delete_album_menu(artists_dictionary, artist, album, level):
	if (level == 'artists'): #menu level

		while True: #keep prompting user for input until valid input is given
			print('Artists:')
			i = 0 #counter to enumerate
			artists = sorted(artists_dictionary) #returns alphabetically sorted list 

			for artist in artists: #displays enumerated and alphabetical list
				print(str(i) + ': ' + artist)
				i+=1
		
			user_input = input('Choose an artist by entering the number, or quit by entering q.\n')
		
			if (user_input == 'q'):
				sys.exit()

			elif user_input.isdigit():
				if (int(user_input) in range(len(artists))):
					delete_album_menu(artists_dictionary, artists[int(user_input)], '', 'albums') #recursive call for albums level of menu

			else:
				print('Invalid input.')

	elif (level == 'albums'):

		while True:
			print('Albums by ' + str(artist) + ':')
			i = 0
			albums = sorted(artists_dictionary[artist])

			for album in albums:
				print(str(i) + ': ' + album)
				i+=1

			user_input = input('Choose an album to delete by entering the number, or return to artists by entering a.\n')
			
			if (user_input == 'a'):
				delete_album_menu(artists_dictionary, '', '', 'artists') #recursive call to return to artists level of menu

			elif user_input.isdigit():
				if (int(user_input) in range((len(albums)))):
					del artists_dictionary[artist][albums[int(user_input)]] #delete user specified album
					update_cddb(artists_dictionary) #update database
					
					if not artists_dictionary[artist]: #delete artist if no albums remaining
						del artists_dictionary[artist]
						update_cddb(artists_dictionary) #update database

					delete_album_menu(artists_dictionary, '', '', 'artists') #recursive call to return to artists level of menu

			else:
				print('Invalid input.')

#parses database and creates data structure for add album menu
def add_album():
	artists_dictionary = read_cddb()	#read database into data structure
	add_album_menu(artists_dictionary) #call to start of menu

#displays menu to add album
def add_album_menu(artists_dictionary):
	artist = ''
	album = ''
	release_date = ''
	song = ''
	songs_list = []

	while (artist == ''): #keeps prompting user for input until valid input is given
		artist = input('Enter artist name:\n')
	
	while (album == ''):
		album = input('Enter album name:\n')

	while (release_date == ''):
			release_date = input('Enter album release date:\n')

	if artist in artists_dictionary:
		if ((release_date + ' ' + album) in artists_dictionary[artist]): #check if artist and album already exist in database
			print('Album already exists.')
			sys.exit()
	
	while True: #keeps prompting user for songs until they are finished
		song = input('Enter track list. Press enter to finish.\n')

		if not (song == ''):
			songs_list.append(song)

		else:
			break
	
	if artist in artists_dictionary: #adds album and its track list to artist if artist already exists
		artists_dictionary[artist][release_date + ' ' + album] = songs_list

	else: #adds new artist, album, and track list if not already existing in database
		artists_dictionary[artist] = {release_date + ' ' + album: songs_list}

	update_cddb(artists_dictionary) #update database

def main():
	check_args()

if __name__ == '__main__':
	main()
